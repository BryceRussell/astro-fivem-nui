<script>
    class NUIHandler {
    parentResource: string | undefined;
    messages: Record<string, Record<string, any>>;
    handlers: Record<string, (data: Record<string, any>) => void>;
    globalHandlers: ((data: Record<string, any>) => void)[];

    constructor(identifier: string = "action") {
      this.handlers = {};
      this.messages = {};
      this.globalHandlers = [];

      try {
        this.parentResource = GetParentResourceName();
      } catch (e) {
        console.log(e);
      }

      window.addEventListener("message", (event) => {
        const data = event.data;
        if (!data[identifier]) return;
        this.messages[data[identifier]] = data;
        for (const fn of this.globalHandlers) fn(data);
        const handler = this.handlers[data[identifier]];
        if (handler) handler(data);
      });
    }

    handle(action: string, func: (data: Record<string, any>) => void) {
      if (action === "all") this.globalHandlers.push(func);
      else this.handlers[action] = func;
    }

    cb(
      endpoint: string,
      payload?: Record<string, any>,
      cb?: (data: Record<string, any>) => void,
      resource?: string
    ) {
      const name = resource ?? this.parentResource;
      if (!name) return;
      console.log(
        `Initiating callback: https://${name}/${endpoint}`,
        payload ?? {}
      );
      fetch(`https://${name}/${endpoint}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=UTF-8",
        },
        body: JSON.stringify(payload ?? {}),
      })
        .then((resp) => {
          console.log(`https://${name}/${endpoint} Response:`, resp.json());
          return resp.json();
        })
        .then((resp) => cb && cb(resp));
    }

    key(key: string, handler: () => void, ctx: Node = document) {
      ctx.addEventListener("keydown", (event: Event) => {
        if ((event as KeyboardEvent).key === key) {
          handler();
        }
      });
    }

    url(url: string) {
      if (!url) return;
      window.invokeNative("openUrl", url);
    }
  }

  window.NUI = new NUIHandler();
</script>

